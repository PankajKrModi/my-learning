BootStrap:

class='img-responsive'  // responsive acc. to the mobile screen size

<h2 class="red-text text-center">CatPhotoApp</h2>

button class="btn btn-default"  //bootstrap button

btn-block // takes up the whole width of screen , starts from new line

btn-primary btn-info btn-danger// each class has different button color to showcase, "btn" is also reqd with each of these classes

screen,s col  is 12 wide : 
col-md-8  // element is 8 width , for medium width phones
col-xs-4  // for xtra small sized phones

<div class='row'>
    <div class='col-xs-4'>
  <button class="btn btn-block btn-primary">Like</button>
    </div>
    <div class='col-xs-4'>
  <button class="btn btn-block btn-info">Info</button>
    </div>
  <div class='col-xs-4'>
  <button class="btn btn-block btn-danger">Delete</button>
  </div>
</div>


  .thick-green-border {
    border-color: green;
    border-width: 10px;
    border-style: solid;
    border-radius: 50%;
  }

Inline: does not take full width of screen ex. <span> ,  used to put different elements on same line

Font awesome icon
<button class="btn btn-block btn-primary">
     <i class='fa fa-thumbs-up'></i>Like  // with bootstrap i used as icon, "fa" class is reqd.
</button>

All textual <input>, <textarea>, and <select> elements with the class .form-control have a width of 100%.

<div class="container-fluid">
<h3 class="text-primary text-center">jQuery Playground</h3>
</div>

===========================================================================================================

Bootstrap has a class called well that can create a visual sense of depth for your columns.

<div class="container-fluid">
  <h3 class="text-primary text-center">jQuery Playground</h3>
  <div class="row">
    <div class="col-xs-6">
      <div class="well"></div>
    </div>
    <div class="col-xs-6">
      <div class="well"></div>
    </div>
  </div>
</div>

===========================================================================================================

<div class="container-fluid">
  <h3 class="text-primary text-center">jQuery Playground</h3>
  <div class="row">
    <div class="col-xs-6">
      <h4>#left-well</h4>
      <div class="well" id="left-well">
        <button class="btn btn-default target"></button>
        <button class="btn btn-default target"></button>
        <button class="btn btn-default target"></button>
      </div>
    </div>
    <div class="col-xs-6">
      <h4>#right-well</h4>
      <div class="well" id="right-well">
        <button class="btn btn-default target"></button>
        <button class="btn btn-default target"></button>
        <button class="btn btn-default target"></button>
      </div>
    </div>
  </div>
</div>

==================================================================================================

JQUERY:

$(document).ready(function(){    // used to make sure code inside function is run after html is rendered
	$("button").addClass("animated bounce");   // use . if it is clas or # if selector is id
});  

===========================================================================================================

<script>
  $(document).ready(function() {
    $("button").addClass("animated bounce"); // animated & bounce are 2 diff classes
    $(".well").addClass("animated shake");
	 $("button").removeClass("btn-default");
  });
</script>

<!-- Only change code above this line. -->

<div class="container-fluid">
  <h3 class="text-primary text-center">jQuery Playground</h3>
  <div class="row">
    <div class="col-xs-6">
      <h4>#left-well</h4>
      <div class="well" id="left-well">
        <button class="btn btn-default target" id="target1">#target1</button>
        <button class="btn btn-default target" id="target2">#target2</button>
        <button class="btn btn-default target" id="target3">#target3</button>
      </div>
    </div>
    <div class="col-xs-6">
      <h4>#right-well</h4>
      <div class="well" id="right-well">
        <button class="btn btn-default target" id="target4">#target4</button>
        <button class="btn btn-default target" id="target5">#target5</button>
        <button class="btn btn-default target" id="target6">#target6</button>
      </div>
    </div>
  </div>
</div>

==============================================================================================
Change the CSS of an Element Using jQuery

$("#target1").css("color","red"); // setting color property of element of id="#target1" to red

========================================================

to adjust properties of element use .prop() :

$("#target1").prop("disabled",true);

========================================================
Change Text Inside an Element Using jQuery

.text() will change the content

$("#target4").html("<em>#target4</em>"); // will add tags

===================================================================

$("#target4").remove();

$("#target2").appendTo("#right-well");  //  moves element from current dom location to under element having id=right-well

$("#target2").clone().appendTo("#right-well");

$("#target1").parent().css("background-color","red"); //parent element

$("#right-well").children().css("color","orange");

======================================================================================================================  
give the third element in each well the bounce class:

$(".target:nth-child(2)").addClass("animated bounce"); //target is class inside well class

$(".target:even").addClass("animated shake"); //target even elements 

$("body").addClass("animated hinge");

=======================================================================================================

Sass, or "Syntactically Awesome StyleSheets", is a language extension of CSS. It adds features that aren't available using basic CSS syntax. Sass makes it easier for developers to simplify and maintain the style sheets for their projects. We can add variables and store data in it.

It is preprocessor , converts scss files into css files, 2 types:

.scss extension(new) , .sass extension

variables start with $ sign ex. $headings-color: green;

EX:

<style type='text/sass'>
  $text-color: red;                     //variable
  
  .header{
    text-align: center;
  }
  .blog-post, h2 {
    color: $text-color;
  }
</style>

Nesting of scss:

<style type='text/sass'>
  .blog-post {
    h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
  }
  
</style>

<div class="blog-post">
  <h1>Blog Title</h1>
  <p>This is a paragraph</p>
</div>


============================================================================================
Mixin :

<style type='text/sass'>
  
  @mixin border-radius($radius){
    -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
  }
  
  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);
  }
</style>

<div id="awesome"></div>
============================================================================================

@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}

==========================================

@for is used in two ways: "start through end" or "start to end". The main difference is that "start to end" excludes the end number, and "start through end" includes the end number.

<style type='text/sass'>
  
  @for $j from 1 to 6{
    .text-#{$j} { font-size: 10px * $j; }   // #{$j}  used to combine variable j with text to make string
  }
  
</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>

=====================================================

Use @each to Map Over Items in a List

@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}

$colors: (color1: blue, color2: red, color3: green);

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}
============================================================

<style type='text/sass'>
  
  @each $color in blue, black, red{
    .#{$color}-bg {background-color: $color; }
  }
  
  div {
    height: 200px;
    width: 200px;
  }
</style>

<div class="blue-bg"></div>
<div class="black-bg"></div>
<div class="red-bg"></div>

=========================================

$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}

============================================================================================================================
extend one set of css into another 

<style type='text/sass'>
  h3{
    text-align: center;
  }
  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }
  
  .info-important{
    @extend .info;
    background-color: magenta;
  }
  
  
</style>

=============================================






 



  




